{
  "name": "nodepie",
  "description": "RSS/Atom parser for Node.JS",
  "version": "0.5.0",
  "author": {
    "name": "Andris Reinman"
  },
  "maintainers": [
    {
      "name": "andris",
      "email": "andris@node.ee"
    }
  ],
  "homepage": "http://github.com/andris9/nodepie",
  "repository": {
    "type": "git",
    "url": "http://github.com/andris9/nodepie.git"
  },
  "main": "./lib/nodepie",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/andris9/nodepie/blob/master/LICENSE"
    }
  ],
  "devDependencies": {
    "nodeunit": "*"
  },
  "dependencies": {
    "xml2json": "*",
    "iconv": "*",
    "fetch": "*"
  },
  "engine": [
    "node >=0.3.0"
  ],
  "keywords": [
    "rss",
    "feed",
    "atom"
  ],
  "readme": "NodePie\n=======\n\nSimple RSS/Atom parser for Node.JS that takes after [SimplePie](http://www.simplepie.org) and [MagPie](http://magpierss.sourceforge.net/).\n\nInstallation\n------------\n\n    npm install nodepie\n\nCompatibility\n-------------\n\nGood for RSS0.92, RSS2.0, RDF and Atom1.0 feeds. \n\nTested against [Wordpress](http://wordpress.com/), [Blogger](http://www.blogger.com/) and [Feedburner](http://feedburner.com/) feeds.\n\nUsage\n-----\n\n    var NodePie = require(\"nodepie\"),\n        xml, feed;\n    \n    xml = require(\"fs\").readFileSync(\"feed.xml\");\n    \n    // create a new NodePie object\n    feed = new NodePie(xml);\n    feed.init();\n    \n    // output feed title\n    console.log(feed.getTitle());\n    \n    // output the titles for the first 3 entries\n    feed.getItems(0, 3).forEach(function(item){\n        console.log(item.getTitle());\n    });\n    \nAPI\n---\n\nConstructor\n-----------\n\n**new NodePie(xml[, options])**\n\nWhere\n\n  * `xml` is a String or Buffer containing the feed XML\n  * `options` is an optional options object\n\nConstructor generates a NodePie object for parsing the feed\n\nUsage\n\n    var NodePie = require(\"nodepie\")\n    feed = new NodePie(xml_contents);\n\n**NB!** `xml` should be a Buffer if the XML is not in UTF-8 encoding. If `xml` is a String it is automatically considered as UTF-8 and the encoding is not converted.\n\nYou can overwrite automatic detection of the encoding by setting explicitly it with an options property (only has effect when the input is a Buffer value):\n\n    var np = new NodePie(xml_buffer, {encoding: \"ISO-8859-1\"});\n\nFeed level methods\n------------------\n\n### - init()\n\n**nodepie.init()**\n\nParses XML and fetches any used namespaces from the object\n\nUsage:\n\n     var feed = new NodePie(xml_contents);\n     feed.init();\n\n### - getDate()\n\n**nodepie.getDate()** → Date\n\nFetches the update date of the feed and returns it as a Date object\n\nUsage:\n\n    var feed = new NodePie(xml_contents);\n    feed.init();\n    date = feed.getDate();\n    console.log(date.getFullYear());\n\nReturns `false` if the date is not found from the feed or if it's in invalid format\n\n### - getDescription()\n\n**nodepie.getDescription()** → String\n\nFetches the description of the feed\n\nUsage:\n\n    var feed = new NodePie(xml_contents);\n    feed.init();\n    description = feed.getDescription();\n\nReturns `false` if the description is not found from the feed\n\n### - getEncoding()\n\n**nodepie.getEncoding()** → String\n\nReturns the encoding for the source feed\n\nUsage:\n\n    var feed = new NodePie(xml_contents);\n    feed.init();\n    source_encoding = feed.getEncoding();\n\nNB! The result is always UTF-8, this only indicates the encoding of the source feed file.\n\n### - getHub()\n\n**nodepie.getHub()** → String\n\nFetches the [PubSubHubbub](http://code.google.com/p/pubsubhubbub/) hub of the feed\n\nUsage:\n\n    var feed = new NodePie(xml_contents);\n    feed.init();\n    hub = feed.getHub();\n\nReturns `false` if the hub is not found from the feed\n\n### - getImage()\n\n**nodepie.getImage()** → String\n\nReturns the URL or the feed image or false if not found\n\nUsage:\n\n    var feed = new NodePie(xml_contents);\n    feed.init();\n    imageUrl = feed.getImage();\n\n### - getItem()\n\n**nodepie.getItem(i)** → Array\n\nWhere\n\n  * `i` is the index of the entry\n\nFetches a `NodePie.Item` object from defined index or `false` if the query is out of bounds\n\nUsage:\n\n    var feed = new NodePie(xml_contents);\n    feed.init();\n    // fetch the first entry from the feed\n    item = feed.getItem(0);\n\n### - getItems()\n\n**nodepie.getItems([start [,length]])** → Array\n\nWhere\n\n  * `start` is start index\n  * `length` indicates how many items to fetch\n\nFetches `NodePie.Item` objects from the feed as an array\n\nUsage:\n\n    var feed = new NodePie(xml_contents);\n    feed.init();\n    // fetch the first 3 entries from the feed\n    items = feed.getItems(0, feed.getItemQuantity(3));\n\n### - getItemQuantity()\n\n**nodepie.getItemQuantity([max])** → Number\n\nWhere\n\n  * `max` is the maximum number to report\n\nReturns the number of entries in the feed\n\nUsage:\n\n    var feed = new NodePie(xml_contents);\n    feed.init();\n    // total items in feed: 10\n    total_entries = feed.getItemQuantity(); // 10\n    total_entries = feed.getItemQuantity(5); // 5\n    total_entries = feed.getItemQuantity(50); // 10\n\n### - getPermalink()\n\n**nodepie.getPermalink()** → String\n\nFetches the link of the blog\n\nUsage:\n\n    var feed = new NodePie(xml_contents);\n    feed.init();\n    url = feed.getPermalink();\n\nReturns `false` if the url is not found from the feed\n\n\n\n### - getTitle()\n\n**nodepie.getTitle()** → String\n\nFetches the title of the feed\n\nUsage:\n\n    var feed = new NodePie(xml_contents);\n    feed.init();\n    title = feed.getTitle();\n\nReturns `false` if the title is not found from the feed\n\n\nItem level methods\n------------------\n\n### - getAuthor()\n\n**item.getAuthor()** → String\n\nFetches the (first) author of the entry\n\nUsage:\n\n    var item = feed.getItem(0);\n    author = item.getAuthor();\n\nReturns `false` if no authors are not found from the entry\n\n### - getAuthors()\n\n**item.getAuthors()** → Array\n\nFetches the authors (as an array of strings) of the entry\n\nUsage:\n\n    var item = feed.getItem(0);\n    authors = item.getAuthors();\n\n### - getCategory()\n\n**item.getCategory()** → String\n\nFetches the (first) category of the entry.\n\nUsage:\n\n    var item = feed.getItem(0);\n    category = item.getCategory();\n\nReturns `false` if no categories are found from the entry\n\n### - getCategories()\n\n**item.getCategories()** → Array\n\nFetches the categories (as an array of strings) for the entry.\n\nUsage:\n\n    var item = feed.getItem(0);\n    categories = item.getCategories();\n\nReturns `false` if the categories are not found from the entry\n\n### - getComments()\n\n**item.getComments()** → Object\n\nFetches an object containing links to the HTML comments page and to an Atom/RSS feed of comments for the post\n\n    {\n        html: \"http://link_to_html_page\",\n        feed: \"http://link_to_comments_feed\"\n    }\n\nUsage:\n\n    var item = feed.getItem(0);\n    comments = item.getComments();\n    console.log(\"See all comments: \" + comments.html);\n\nReturns `false` if the no information about comments is found from the entry\n\n### - getContents()\n\n**item.getContents()** → String\n\nFetches the contents of the entry. Prefers full text, otherwise falls back to description.\n\nUsage:\n\n    var item = feed.getItem(0);\n    contents = item.getContents();\n\nReturns `false` if the description or contents are not found from the entry\n\n### - getDate()\n\n**item.getDate()** → Date\n\nFetches the date of the entry as a Date object\n\nUsage:\n\n    var item = feed.getItem(0);\n    date = item.getDate();\n    console.log(date.getFullYear());\n\nReturns `false` if the date is not found from the entry or if it's in invalid format\n\n### - getDescription()\n\n**item.getDescription()** → String\n\nFetches the description of the entry. Prefers summaries, otherwise falls back to full content.\n\nUsage:\n\n    var item = feed.getItem(0);\n    description = item.getDescription();\n\nReturns `false` if the description or contents are not found from the entry\n\n### - getPermalink()\n\n**item.getPermalink()** → String\n\nFetches the link of the entry\n\nUsage:\n\n    var item = feed.getItem(0);\n    url = item.getPermalink();\n\nReturns `false` if the url is not found from the entry\n\n### - getTitle()\n\n**item.getTitle()** → String\n\nFetches the title of the entry\n\nUsage:\n\n    var item = feed.getItem(0);\n    title = item.getTitle();\n\nReturns `false` if the title is not found from the entry\n\n### - getUpdateDate()\n\n**item.getUpdateDate()** → Date\n\nFetches the update date of the entry as a Date object\n\nUsage:\n\n    var item = feed.getItem(0);\n    date = item.getUpdateDate();\n    console.log(date.getFullYear());\n\nFalls back to getDate when update date not found or returns `false` if the date is not found from the entry or if it's in invalid format\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/andris9/nodepie/issues"
  },
  "_id": "nodepie@0.5.0",
  "dist": {
    "shasum": "1617950b6015c654b84dda438cd8e9ce2c871050"
  },
  "_from": "nodepie@0.5.0",
  "_resolved": "https://registry.npmjs.org/nodepie/-/nodepie-0.5.0.tgz"
}
